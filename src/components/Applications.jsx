import React, { useState, useEffect } from 'react'
import { 
  Calendar, 
  User, 
  Building, 
  Phone, 
  Mail, 
  FileText, 
  DollarSign,
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Trash2
} from 'lucide-react'
import { getApiUrl } from '../utils/api'
import './Applications.css'

const Applications = () => {
  const [applications, setApplications] = useState([])
  const [loading, setLoading] = useState(true)
  const [selectedApplication, setSelectedApplication] = useState(null)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
  useEffect(() => {
    fetchApplications()
  }, [])

  const fetchApplications = async () => {
    try {
      setLoading(true)
      const response = await fetch(getApiUrl('/api/reports'))
      const data = await response.json()
      
      if (data.ok) {
        setApplications(data.reports)
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', data.message)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return <CheckCircle size={16} className="status-icon completed" />
      case 'generating':
        return <Clock size={16} className="status-icon generating" />
      case 'error':
        return <XCircle size={16} className="status-icon error" />
      default:
        return <AlertCircle size={16} className="status-icon pending" />
    }
  }

  const getStatusText = (status) => {
    switch (status) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
      case 'generating':
        return '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç'
      case 'error':
        return '–û—à–∏–±–∫–∞'
      default:
        return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
    }
  }

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const handleApplicationClick = async (application) => {
    console.log('üîç –í—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞:', application)
    console.log('üìä –°—Ç–∞—Ç—É—Å:', application.status)
    console.log('üìÑ –û—Ç—á–µ—Ç:', application.reportText ? '–ï—Å—Ç—å' : '–ù–µ—Ç')
    
    setSelectedApplication(application)
    
    // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (application.status === 'generating') {
      try {
        const response = await fetch(getApiUrl(`/api/reports/${application.sessionId}`))
        const data = await response.json()
        
        if (data.ok && data.report) {
          console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç:', data.report.reportText ? '–ï—Å—Ç—å' : '–ù–µ—Ç')
          setSelectedApplication(data.report)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞:', error)
      }
    }
  }

  const handleDeleteApplication = async (applicationId, event) => {
    event.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
    
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
      try {
        const response = await fetch(getApiUrl(`/api/reports/${applicationId}`), {
          method: 'DELETE'
        })
        
        if (response.ok) {
          // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
          setApplications(prev => prev.filter(app => app.sessionId !== applicationId))
          
          // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
          if (selectedApplication?.sessionId === applicationId) {
            setSelectedApplication(null)
          }
          
          console.log('–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        } else {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏')
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
      }
    }
  }

  if (loading) {
    return (
      <div className="applications-container">
        <div className="applications-header">
          <h2>–ó–∞—è–≤–∫–∏</h2>
        </div>
        <div className="loading">
          <Clock size={24} className="animate-spin" />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="applications-container">
      <div className="applications-header">
        <h2>–ó–∞—è–≤–∫–∏ ({applications.length})</h2>
        <button 
          onClick={fetchApplications}
          className="refresh-button"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      <div className="applications-content">
        <div className="applications-list">
          {applications.length === 0 ? (
            <div className="empty-state">
              <FileText size={48} />
              <h3>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
              <p>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
            </div>
          ) : (
            applications.map((app) => (
              <div 
                key={app.sessionId}
                className={`application-card ${selectedApplication?.sessionId === app.sessionId ? 'selected' : ''}`}
                onClick={() => handleApplicationClick(app)}
              >
                <div className="application-header">
                  <div className="application-status">
                    {getStatusIcon(app.status)}
                    <span className="status-text">{getStatusText(app.status)}</span>
                  </div>
                  <div className="application-date">
                    {formatDate(app.createdAt)}
                  </div>
                </div>

                <div className="application-info">
                  <div className="info-row">
                    <Building size={16} />
                    <span className="label">–ö–æ–º–ø–∞–Ω–∏—è:</span>
                    <span className="value">{app.bin || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  
                  <div className="info-row">
                    <User size={16} />
                    <span className="label">–ö–æ–Ω—Ç–∞–∫—Ç:</span>
                    <span className="value">{app.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                  </div>
                  
                  <div className="info-row">
                    <DollarSign size={16} />
                    <span className="label">–°—É–º–º–∞:</span>
                    <span className="value">{app.amount || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                  </div>
                  
                  <div className="info-row">
                    <Clock size={16} />
                    <span className="label">–°—Ä–æ–∫:</span>
                    <span className="value">{app.term || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  
                  {app.email && (
                    <div className="info-row">
                      <Mail size={16} />
                      <span className="label">Email:</span>
                      <span className="value">{app.email}</span>
                    </div>
                  )}
                  
                  {app.phone && (
                    <div className="info-row">
                      <Phone size={16} />
                      <span className="label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                      <span className="value">{app.phone}</span>
                    </div>
                  )}
                </div>

                <div className="application-footer">
                  <div className="files-count">
                    <FileText size={14} />
                    <span>{app.filesCount || 0} —Ñ–∞–π–ª–æ–≤</span>
                  </div>
                  <button 
                    className="delete-button"
                    onClick={(e) => handleDeleteApplication(app.sessionId, e)}
                    title="–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"
                  >
                    <Trash2 size={16} />
                  </button>
                </div>
              </div>
            ))
          )}
        </div>

        {selectedApplication && (
          <div className="application-details">
            <div className="details-header">
              <h3>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
              <button 
                onClick={() => setSelectedApplication(null)}
                className="close-button"
              >
                √ó
              </button>
            </div>
            
            <div className="details-content">
              <div className="detail-section">
                <h4>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div className="detail-grid">
                  <div className="detail-item">
                    <span className="detail-label">–ë–ò–ù:</span>
                    <span className="detail-value">{selectedApplication.bin || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">–°—É–º–º–∞:</span>
                    <span className="detail-value">{selectedApplication.amount || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">–°—Ä–æ–∫:</span>
                    <span className="detail-value">{selectedApplication.term || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">–¶–µ–ª—å:</span>
                    <span className="detail-value">{selectedApplication.purpose || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                  </div>
                </div>
              </div>

              <div className="detail-section">
                <h4>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
                <div className="detail-grid">
                  <div className="detail-item">
                    <span className="detail-label">–ò–º—è:</span>
                    <span className="detail-value">{selectedApplication.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">Email:</span>
                    <span className="detail-value">{selectedApplication.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span className="detail-value">{selectedApplication.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                </div>
              </div>

              {selectedApplication.reportText ? (
                <div className="detail-section">
                  <h4>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</h4>
                  <div className="report-content">
                    <pre>{selectedApplication.reportText}</pre>
                  </div>
                </div>
              ) : (
                <div className="detail-section">
                  <h4>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</h4>
                  <div className="report-content">
                    <p style={{ color: '#6b7280', fontStyle: 'italic' }}>
                      {selectedApplication.status === 'generating' 
                        ? '–û—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...' 
                        : '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤'
                      }
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Applications
